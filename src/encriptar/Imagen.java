/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package encriptar;

import java.awt.Graphics;
import java.awt.GraphicsConfiguration;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.Transparency;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.net.URL;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author gabriel
 */
public class Imagen extends javax.swing.JFrame {
    //declaramos el chooser y las variables como global para llamarlo de cualquier parte del codigo
    JFileChooser imagen = new JFileChooser();
    String nombre;
    String ruta;
    String Nom;
    String caso;
    String an ;
    String al;
    String input = "1000";
    String REncriptada ;
    
    Image homer = null;
    BufferedImage bi, enc, denc;
    int ancho; //ancho de la imagen
    int alto;  // alto de la imagen
    int x, y;
    int matriz[][]; // matriz de pixeles encriptados
    int matriz2[][]; // matriz de pixeles desencriptados
    int rgbs[];     // matriz de pixeles de la imagen
    int ingresar[]; // matriz de pixeles de la imagen encriptados
    int desenc[]; // matriz de pixeles desencriptados debe ser igual a rgbs
    int f, p, clave, largo; // f numero fragmentos, p numero que desordena
    int l; // total de pixeles a fragmentar
    int cont = 0;
    boolean opcion = false;
    /**
     * Creates new form Imagen
     */
    public Imagen() {
        initComponents();
        
        this.setLocationRelativeTo(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblEncriptadaE = new javax.swing.JLabel();
        lblEncriptada = new javax.swing.JLabel();
        lblOriginal = new javax.swing.JLabel();
        btnSelectO = new javax.swing.JButton();
        btnEncriptar = new javax.swing.JButton();
        btnSelectE = new javax.swing.JButton();
        btnDesencrip = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));

        lblEncriptadaE.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        lblEncriptadaE.setForeground(new java.awt.Color(0, 0, 102));
        lblEncriptadaE.setText("Imagen Encriptada");

        lblEncriptada.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        lblEncriptada.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        lblOriginal.setForeground(new java.awt.Color(102, 255, 204));
        lblOriginal.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        lblOriginal.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        btnSelectO.setBackground(new java.awt.Color(204, 204, 204));
        btnSelectO.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnSelectO.setForeground(new java.awt.Color(0, 0, 102));
        btnSelectO.setText("Selecionar");
        btnSelectO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectOActionPerformed(evt);
            }
        });

        btnEncriptar.setBackground(new java.awt.Color(204, 204, 204));
        btnEncriptar.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnEncriptar.setForeground(new java.awt.Color(0, 0, 51));
        btnEncriptar.setText("Encriptado");
        btnEncriptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEncriptarActionPerformed(evt);
            }
        });

        btnSelectE.setBackground(new java.awt.Color(204, 204, 204));
        btnSelectE.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnSelectE.setForeground(new java.awt.Color(0, 0, 51));
        btnSelectE.setText("Selecionar");
        btnSelectE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectEActionPerformed(evt);
            }
        });

        btnDesencrip.setBackground(new java.awt.Color(204, 204, 204));
        btnDesencrip.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnDesencrip.setForeground(new java.awt.Color(0, 51, 51));
        btnDesencrip.setText("Desencriptado");
        btnDesencrip.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDesencripActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 102));
        jLabel3.setText("Imagen Original");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap(16, Short.MAX_VALUE)
                        .addComponent(lblOriginal, javax.swing.GroupLayout.PREFERRED_SIZE, 391, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblEncriptada, javax.swing.GroupLayout.PREFERRED_SIZE, 418, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(145, 145, 145)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblEncriptadaE)
                        .addGap(139, 139, 139)))
                .addContainerGap(17, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addComponent(btnSelectO)
                .addGap(26, 26, 26)
                .addComponent(btnEncriptar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnSelectE)
                .addGap(77, 77, 77)
                .addComponent(btnDesencrip)
                .addGap(49, 49, 49))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(lblEncriptadaE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblOriginal, javax.swing.GroupLayout.DEFAULT_SIZE, 312, Short.MAX_VALUE)
                    .addComponent(lblEncriptada, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEncriptar)
                    .addComponent(btnSelectO)
                    .addComponent(btnDesencrip)
                    .addComponent(btnSelectE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * Boton para seleccionar la imagen original limpia los jlabel cada vez que hacemos clik en el
     * @param evt 
     */
    private void btnSelectOActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectOActionPerformed
        rsscalelabel.RSScaleLabel.setScaleLabel(lblOriginal, null);
        rsscalelabel.RSScaleLabel.setScaleLabel(lblEncriptada, null);
        imagen.setDialogTitle("Buscar imagen");
        if(imagen.showOpenDialog(this)==JFileChooser.APPROVE_OPTION){
            rsscalelabel.RSScaleLabel.setScaleLabel(lblOriginal, imagen.getSelectedFile().toString());
            nombre = imagen.getSelectedFile().toString();
            Nom = imagen.getSelectedFile().getName();
            ruta = imagen.getCurrentDirectory().toString();
        }
    }//GEN-LAST:event_btnSelectOActionPerformed

    private void btnEncriptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEncriptarActionPerformed
        caso = "e";
        Encriptar();
    }//GEN-LAST:event_btnEncriptarActionPerformed

    private void btnSelectEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectEActionPerformed
        rsscalelabel.RSScaleLabel.setScaleLabel(lblOriginal, null);
        rsscalelabel.RSScaleLabel.setScaleLabel(lblEncriptada, null);
        imagen.setDialogTitle("Buscar imagen");
        if(imagen.showOpenDialog(this)==JFileChooser.APPROVE_OPTION){
            rsscalelabel.RSScaleLabel.setScaleLabel(lblEncriptada, imagen.getSelectedFile().toString());
            
            nombre = imagen.getSelectedFile().toString();
            Nom = imagen.getSelectedFile().getName();
            ruta = imagen.getCurrentDirectory().toString();
        }
    }//GEN-LAST:event_btnSelectEActionPerformed

    private void btnDesencripActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDesencripActionPerformed
        caso = "d";
        Encriptar();
    }//GEN-LAST:event_btnDesencripActionPerformed
    public void Encriptar() {
        Image img= new ImageIcon(nombre).getImage();
        an = String.valueOf(img.getWidth(rootPane));
        al = String.valueOf(img.getHeight(rootPane));
        String pasword = JOptionPane.showInputDialog("Ingrese clave de 4 dígitos");
                if (input == null || input.equalsIgnoreCase("")) {
            f = 50; 
        } else {
            f = Integer.parseInt(input);  
        }
        if (pasword == null || pasword.equalsIgnoreCase("")) {
            clave = 1597; 
        } else {
            clave = Integer.parseInt(pasword);
        }
        if (caso == null || caso.equalsIgnoreCase("")) {
            System.out.println("Opcion por defecto encriptar");
        } else {
            if (caso.equalsIgnoreCase("d")) {
                System.out.println("desencriptar");
                opcion = false;
            } else {
                System.out.println("encriptar");
                opcion = true;
            }
        }

        if (an == null || an.equalsIgnoreCase("")) {
            ancho = 10;
        } else {
            ancho = Integer.parseInt(an);  
        }
        if (al == null || al.equalsIgnoreCase("")) {
            alto = 10;
        } else {
            alto = Integer.parseInt(al);  
        }

        homer = Toolkit.getDefaultToolkit().getImage(nombre);
        
        p = clave % f;
        while (p == 0) {
            clave = clave + 3;
            p = clave % f;
        }
        if ((p % 2) == 0 && p > 1 && (f % 2) == 0) {
            p = p - 1;
        }
        if ((p % 2) != 0 && (f % 2) != 0 && p > 1) {
            p = p - 1;
        }

        l = f * ((ancho * alto) / f);
        largo = l / f;         
        if (homer != null) {
            bi = toBufferedImage(homer);        }
        enc = bi;
        if (opcion == true) {
            rgbs = new int[ancho * alto];
            bi.getRGB(0, 0, ancho, alto, rgbs, 0, ancho);
            encriptaImagen();
            if (matriz != null) {
                cont = 0;
                for (int i = 0; i < alto; i++) {
                    for (int j = 0; j < ancho; j++) {
                        enc.setRGB(j, i, ingresar[cont]);
                        cont = cont + 1;
                    }
                }
            }
                        try {
                File outputFile = new File(ruta+"/"+"ENCRIPTADA_"+Nom);
                
                ImageIO.write(enc, "JPG", outputFile);
                
                rsscalelabel.RSScaleLabel.setScaleLabel(lblEncriptada, ruta+"/"+"ENCRIPTADA_"+Nom);
                rsscalelabel.RSScaleLabel.setScaleLabel(lblOriginal, null);
                nombre = ruta+"/"+"ENCRIPTADA_"+Nom;
                
            } catch (IOException e) {
                System.out.println(e);
            }
        } else {
            rgbs = new int[ancho * alto];
            denc = enc;
            enc.getRGB(0, 0, ancho, alto, rgbs, 0, ancho);
            desencriptaImagen();
            if (matriz2 != null) {
                cont = 0;
                for (int i = 0; i < alto; i++) {
                    for (int j = 0; j < ancho; j++) {
                        denc.setRGB(j, i, desenc[cont]);
                        cont = cont + 1;              }   } }
            try {
                           File outputFile = new File(ruta+"/"+"DESENCRIPTADA_"+Nom);
                ImageIO.write(denc, "JPG", outputFile);
                
                rsscalelabel.RSScaleLabel.setScaleLabel(lblOriginal, ruta+"/"+"DESENCRIPTADA_"+Nom);
                rsscalelabel.RSScaleLabel.setScaleLabel(lblEncriptada, null);
                
                
            } catch (IOException e) {
                System.out.println(e);
            }
        }
    }
    
    public static BufferedImage toBufferedImage(Image image) {
        if (image instanceof BufferedImage) {
            return (BufferedImage) image;        }
        image = new ImageIcon(image).getImage();
        BufferedImage bimage = null;
        GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
        try {
            int transparency = Transparency.OPAQUE;
            GraphicsDevice gs = ge.getDefaultScreenDevice();
            GraphicsConfiguration gc = gs.getDefaultConfiguration();
            bimage = gc.createCompatibleImage(image.getWidth(null), image.getHeight(null), transparency);
        } catch (Exception e) {
        }
        if (bimage == null) {
            int type = BufferedImage.TYPE_INT_RGB;
            bimage = new BufferedImage(image.getWidth(null), image.getHeight(null), type);
        }        Graphics g = bimage.createGraphics();
        g.drawImage(image, 0, 0, null);
        g.dispose();
        return bimage;    }
    
    public void encriptaImagen() {
        int cont = 0;
        int a[][] = new int[largo][f];
        for (int i = 0; i < f; i++) {
            for (int j = 0; j < largo; j++) {
                a[j][i] = rgbs[cont];
                cont = cont + 1;      }     }
        matriz = new int[largo][f];
        for (int i = 1; i <= f; i++) {
            for (int j = 0; j < largo; j++) {
                matriz[j][(i * p) % f] = a[j][i - 1]; }    }
        cont = 0;
        ingresar = new int[ancho * alto];
        for (int i = 0; i < f; i++) {
            for (int j = 0; j < largo; j++) {
                ingresar[cont] = matriz[j][i];
                 cont = cont + 1;   }
        }
    }
// Tenemos en el buffer enc la imagen encriptada
// Se procede a desencriptar la imagen    
    public void desencriptaImagen() {
        int b[][] = new int[largo][f];
        int cont = 0;
        for (int i = 0; i < f; i++) {
            for (int j = 0; j < largo; j++) {
                b[j][i] = rgbs[cont];
                cont = cont + 1;  }    }
        matriz2 = new int[largo][f];
        for (int i = 1; i <= f; i++) {
            for (int j = 0; j < largo; j++) {
                matriz2[j][i - 1] = b[j][(i * p) % f];  }  }
        cont = 0;
        desenc = new int[ancho * alto];

        for (int i = 0; i < f; i++) {
            for (int j = 0; j < largo; j++) {
                desenc[cont] = matriz2[j][i];
                cont = cont + 1;   }  }}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
                java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Imagen().setVisible(true);                    
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDesencrip;
    private javax.swing.JButton btnEncriptar;
    private javax.swing.JButton btnSelectE;
    private javax.swing.JButton btnSelectO;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblEncriptada;
    private javax.swing.JLabel lblEncriptadaE;
    private javax.swing.JLabel lblOriginal;
    // End of variables declaration//GEN-END:variables
}
